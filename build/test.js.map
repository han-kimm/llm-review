{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from \"fs\";\nimport { Octokit } from \"@octokit/rest\";\nimport parseDiff, { Chunk, File } from \"parse-diff\";\nimport { minimatch } from \"minimatch\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { execSync } from \"child_process\";\n\nexecSync(\"yarn install\", { stdio: \"inherit\" });\n\nconst { GITHUB_TOKEN, LLM_API_KEY, LLM_API_MODEL, exclude } = process.env;\n\nconst octokit = new Octokit({ auth: GITHUB_TOKEN });\n\nconst llm = new Anthropic({\n  apiKey: LLM_API_KEY,\n});\n\nconst SYSTEM_PROMPT = \"You are a strict and perfect code review AI.\";\n\ninterface PRDetails {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  title: string;\n  description: string;\n}\n\nasync function getPRDetails(): Promise<PRDetails> {\n  const { repository, number } = JSON.parse(\n    readFileSync(process.env.GITHUB_EVENT_PATH || \"\", \"utf8\")\n  );\n  const prResponse = await octokit.pulls.get({\n    owner: repository.owner.login,\n    repo: repository.name,\n    pull_number: number,\n  });\n  return {\n    owner: repository.owner.login,\n    repo: repository.name,\n    pull_number: number,\n    title: prResponse.data.title ?? \"\",\n    description: prResponse.data.body ?? \"\",\n  };\n}\n\nasync function getDiff(\n  owner: string,\n  repo: string,\n  pull_number: number\n): Promise<string | null> {\n  const response = await octokit.pulls.get({\n    owner,\n    repo,\n    pull_number,\n    mediaType: { format: \"diff\" },\n  });\n  // @ts-expect-error - response.data is a string\n  return response.data;\n}\n\nasync function analyzeCode(\n  parsedDiff: File[],\n  prDetails: PRDetails\n): Promise<Array<{ body: string; path: string; line: number }>> {\n  const comments: Array<{ body: string; path: string; line: number }> = [];\n\n  for (const file of parsedDiff) {\n    if (file.to === \"/dev/null\") continue; // Ignore deleted files\n    for (const chunk of file.chunks) {\n      const prompt = createPrompt(file, chunk, prDetails);\n      const aiResponse = await getAIResponse(prompt);\n      if (aiResponse) {\n        const newComments = createComment(file, chunk, aiResponse);\n        if (newComments) {\n          comments.push(...newComments);\n        }\n      }\n    }\n  }\n  return comments;\n}\n\nfunction createPrompt(file: File, chunk: Chunk, prDetails: PRDetails): string {\n  return `Your task is to review pull requests. Instructions:\n- Provide the response in following JSON format:  {\"reviews\": [{\"lineNumber\":  <line_number>, \"reviewComment\": \"<review comment>\"}]}\n- Do not give positive comments or compliments.\n- Provide comments and suggestions ONLY if there is something to improve, otherwise \"reviews\" should be an empty array.\n- Write the comment in GitHub Markdown format.\n- Use the given description only for the overall context and only comment the code.\n- IMPORTANT: NEVER suggest adding comments to the code.\n\nReview the following code diff in the file \"${\n    file.to\n  }\" and take the pull request title and description into account when writing the response.\n  \nPull request title: ${prDetails.title}\nPull request description:\n\n---\n${prDetails.description}\n---\n\nGit diff to review:\n\n\\`\\`\\`diff\n${chunk.content}\n${chunk.changes\n  // @ts-expect-error - ln and ln2 exists where needed\n  .map((c) => `${c.ln ? c.ln : c.ln2} ${c.content}`)\n  .join(\"\\n\")}\n\\`\\`\\`\n`;\n}\n\nasync function getAIResponse(prompt: string): Promise<Array<{\n  lineNumber: string;\n  reviewComment: string;\n}> | null> {\n  const queryConfig = {\n    model: LLM_API_MODEL ?? \"claude-3-haiku-20240307\",\n    temperature: 0.2,\n    max_tokens: 700,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n  };\n\n  try {\n    const response = await llm.messages.create({\n      ...queryConfig,\n      // return JSON if the model supports it:\n      system: SYSTEM_PROMPT,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const { type } = response.content[0];\n    if (type === \"text\") {\n      return JSON.parse(response.content[0].text).reviews;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return null;\n  }\n}\n\nfunction createComment(\n  file: File,\n  chunk: Chunk,\n  aiResponses: Array<{\n    lineNumber: string;\n    reviewComment: string;\n  }>\n): Array<{ body: string; path: string; line: number }> {\n  return aiResponses.flatMap((aiResponse) => {\n    if (!file.to) {\n      return [];\n    }\n    return {\n      body: aiResponse.reviewComment,\n      path: file.to,\n      line: Number(aiResponse.lineNumber),\n    };\n  });\n}\n\nasync function createReviewComment(\n  owner: string,\n  repo: string,\n  pull_number: number,\n  comments: Array<{ body: string; path: string; line: number }>\n): Promise<void> {\n  await octokit.pulls.createReview({\n    owner,\n    repo,\n    pull_number,\n    comments,\n    event: \"COMMENT\",\n  });\n}\n\nasync function main() {\n  const prDetails = await getPRDetails();\n  let diff: string | null;\n  const eventData = JSON.parse(\n    readFileSync(process.env.GITHUB_EVENT_PATH ?? \"\", \"utf8\")\n  );\n\n  if (eventData.action === \"opened\") {\n    diff = await getDiff(\n      prDetails.owner,\n      prDetails.repo,\n      prDetails.pull_number\n    );\n  } else if (eventData.action === \"synchronize\") {\n    const newBaseSha = eventData.before;\n    const newHeadSha = eventData.after;\n\n    const response = await octokit.repos.compareCommits({\n      headers: {\n        accept: \"application/vnd.github.v3.diff\",\n      },\n      owner: prDetails.owner,\n      repo: prDetails.repo,\n      base: newBaseSha,\n      head: newHeadSha,\n    });\n\n    diff = String(response.data);\n  } else {\n    console.log(\"Unsupported event:\", process.env.GITHUB_EVENT_NAME);\n    return;\n  }\n\n  if (!diff) {\n    console.log(\"No diff found\");\n    return;\n  }\n\n  const parsedDiff = parseDiff(diff);\n\n  const excludePatterns = exclude!.split(\",\").map((s) => s.trim());\n\n  const filteredDiff = parsedDiff.filter((file) => {\n    return !excludePatterns.some((pattern) =>\n      minimatch(file.to ?? \"\", pattern)\n    );\n  });\n\n  const comments = await analyzeCode(filteredDiff, prDetails);\n  if (comments.length > 0) {\n    await createReviewComment(\n      prDetails.owner,\n      prDetails.repo,\n      prDetails.pull_number,\n      comments\n    );\n  }\n}\n\nmain().catch((error) => {\n  console.error(\"Error:\", error);\n  process.exit(1);\n});\n"]}